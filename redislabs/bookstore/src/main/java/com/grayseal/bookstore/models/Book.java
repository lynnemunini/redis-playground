package com.grayseal.bookstore.models;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Reference;
import org.springframework.data.redis.core.RedisHash;

import java.util.HashSet;
import java.util.Set;

/**
 * Represents a book entity stored in a Redis database.
 * This class is annotated with {@code @RedisHash} to indicate that it should be stored as a Redis hash.
 * It uses Lombok annotations to automatically generate boilerplate code like getters, setters,
 * and {@code equals()} and {@code hashCode()} methods.
 *
 * <p>
 * The {@code Book} class includes various attributes related to a book, such as its title, description,
 * language, and more. It also maintains relationships with authors and categories.
 * </p>
 *
 * <p>
 * The {@code @EqualsAndHashCode.Include} annotation is applied to the {@code id} field to include it
 * in the {@code equals()} and {@code hashCode()} methods generated by Lombok.
 * </p>
 *
 * <p>
 * The class supports adding categories to a book through the {@code addCategory} method.
 * </p>
 *
 * <pre>{@code
 * Example usage:
 * Book book = new Book();
 * book.setTitle("Redis in Action");
 * book.addCategory(new Category("Technology"));
 * }</pre>
 *
 * @author Lynne
 */
@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@RedisHash
public class Book {

    @Id
    @EqualsAndHashCode.Include
    private String id;

    private String title;
    private String subtitle;
    private String description;
    private String language;
    private Long pageCount;
    private String thumbnail;
    private Double price;
    private String currency;
    private String infoLink;

    private Set<String> authors;

    @Reference
    private Set<Category> categories = new HashSet<Category>();

    public void addCategory(Category category) {
        categories.add(category);
    }
}